import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-88d002b0.js";const p={},e=t(`<h1 id="字符串string" tabindex="-1"><a class="header-anchor" href="#字符串string" aria-hidden="true">#</a> 字符串String</h1><h2 id="stirng方法" tabindex="-1"><a class="header-anchor" href="#stirng方法" aria-hidden="true">#</a> Stirng方法</h2><ul><li>String 是不可变的,String 类中使⽤ final 关键字修饰字符数组来保存字符串</li><li>使用 + 号拼接字符串,如果+号左右存在变量则调用的StringBuilder的 append() 方法拼接然后进行 toString() 相当于 new 一个字符串在堆. 若两边都是字面字符常量会在编译期就合并了.</li></ul><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token comment">//将xxx转换为string类型</span>
            <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//字符串长度</span>
            <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//去字符串前后空格</span>
            <span class="token function">split</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">//按n（为字符或正则）进行字符串切割</span>
            <span class="token function">replaceall</span><span class="token punctuation">(</span>正则，新符号<span class="token punctuation">)</span> <span class="token comment">//替换可字符可正则</span>
            <span class="token function">replace</span><span class="token punctuation">(</span>被替换字符，新字符<span class="token punctuation">)</span> <span class="token comment">//替换只能用字符</span>
            <span class="token function">substring</span><span class="token punctuation">(</span>begin，end<span class="token punctuation">)</span> <span class="token comment">//获取子字符串，含头不含尾从0开始数</span>
            s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">//字符串比较，实际上就是做减法从第一个不相同的字符开始比</span>
            <span class="token function">equals</span><span class="token punctuation">(</span>str）<span class="token comment">//字符串内容是否相同</span>
            <span class="token function">equalsIgnorecase</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">//忽略大小写比较内容</span>
            <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//判断字符串是否为空</span>
            <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//字符串连接</span>
            <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//方法用于检测字符串是否以指定的前缀开始。</span>
            <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">)</span> <span class="token comment">//字符串中开始查找的位置,查找前缀</span>
            <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span>
            <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token comment">//测试此字符串是否以指定的后缀结尾</span>
            <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//字符串格式化,只用%s就可以接受大部分数据 String.format(&quot;%s %s&quot;,msg1,msg2); 比使用+或</span>
            <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法节省内存
            <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//转成大写字母</span>
            <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">//指定索引处的字符。索引范围为从 0 到 length() - 1。</span>
            <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span> <span class="token comment">//返回指定字符在此字符串中第一次出现处的索引。</span>
            <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//字符串 转为 char []</span>
            <span class="token comment">//如果该对象代表的字符串在常量池可以找到，那么，返回该常量的引用，如果找不到，那么，去堆中查找，堆中存在，则讲堆中对象的引用放入常量池(注意是对象的引用)，并返回该引用，如果都没有找到，则讲该字面量放入常量池</span>
            <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stringbuffer-stringbuilder方法" tabindex="-1"><a class="header-anchor" href="#stringbuffer-stringbuilder方法" aria-hidden="true">#</a> StringBuffer StringBuilder方法</h2><ul><li>StringBuffer和StringBuilder是可变的,没用final修饰字符数组 内部char数组长度为构建时初始字符串长度加 16；</li><li>如果要操作少量的数据用 String,线程安全；</li><li>多线程操作字符串缓冲区下操作大量数据 StringBuffer，使用了同步锁速度较慢线程安全；</li><li>单线程操作字符串缓冲区下操作大量数据 StringBuilder；速度最快线程不安全</li></ul><h3 id="常用方法-1" tabindex="-1"><a class="header-anchor" href="#常用方法-1" aria-hidden="true">#</a> 常用方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>            <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//追加字符串</span>
            <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//反转字符串</span>
            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token comment">//移除此序列的子字符串中的字符。</span>
            <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token comment">//使用给定 String 中的字符替换此序列的子字符串中的字符。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string不可变的好处" tabindex="-1"><a class="header-anchor" href="#string不可变的好处" aria-hidden="true">#</a> String不可变的好处</h3><ul><li>保证hash 值相同: 因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变 的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</li><li>String Pool 字符串常量池的需要: 如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</li><li>线程安全性: 不可变保证了字符串本身是线程安全的</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>            <span class="token comment">//String比较</span>
            <span class="token comment">//常量池中创建一个&quot;11&quot;对象</span>
            <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">;</span>
            <span class="token comment">//在堆中创建对象，并且新建一个&quot;11&quot;对象放入常量池</span>
            <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//创建5个，分别是堆中的3个：&quot;11&quot; &quot;111&quot; &quot;11111&quot;，常量池2个 &quot;11&quot; &quot;111&quot;</span>
            <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Programming&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Programming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;Program&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;ming&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">&quot;Program&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ming&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> s6 <span class="token operator">=</span> s3 <span class="token operator">+</span> s4<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s6<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断字符串是否为数字" tabindex="-1"><a class="header-anchor" href="#判断字符串是否为数字" aria-hidden="true">#</a> 判断字符串是否为数字</h3><h4 id="用java自带的函数" tabindex="-1"><a class="header-anchor" href="#用java自带的函数" aria-hidden="true">#</a> 用JAVA自带的函数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                         <span class="token punctuation">}</span>
                   <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用lang3下的包下stringutils类的方法isnumeric" tabindex="-1"><a class="header-anchor" href="#使用lang3下的包下stringutils类的方法isnumeric" aria-hidden="true">#</a> 使用lang3下的包下StringUtils类的方法isNumeric()</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">&quot;1235456&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> flag <span class="token operator">=</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用正则表达式" tabindex="-1"><a class="header-anchor" href="#用正则表达式" aria-hidden="true">#</a> 用正则表达式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[0-9]*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","06-String.html.vue"]]);export{k as default};
