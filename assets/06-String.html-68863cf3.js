const n=JSON.parse('{"key":"v-27694f64","path":"/study/java/javaSE/06-String.html","title":"字符串String","lang":"zh-CN","frontmatter":{"category":"基础","tag":["String","java"],"description":"字符串String Stirng方法 String 是不可变的,String 类中使⽤ final 关键字修饰字符数组来保存字符串 使用 + 号拼接字符串,如果+号左右存在变量则调用的StringBuilder的 append() 方法拼接然后进行 toString() 相当于 new 一个字符串在堆. 若两边都是字面字符常量会在编译期就合并了. 常用方法 String.valueof(xxx) //将xxx转换为string类型 length() //字符串长度 trim() //去字符串前后空格 split(n) //按n（为字符或正则）进行字符串切割 replaceall(正则，新符号) //替换可字符可正则 replace(被替换字符，新字符) //替换只能用字符 substring(begin，end) //获取子字符串，含头不含尾从0开始数 s1.compareTo(s2) //字符串比较，实际上就是做减法从第一个不相同的字符开始比 equals(str）//字符串内容是否相同 equalsIgnorecase(str) //忽略大小写比较内容 isEmpty() //判断字符串是否为空 concat() //字符串连接 startsWith() //方法用于检测字符串是否以指定的前缀开始。 startsWith(String prefix, int toffset) //字符串中开始查找的位置,查找前缀 startsWith(String prefix) endsWith(String suffix) //测试此字符串是否以指定的后缀结尾 format() //字符串格式化,只用%s就可以接受大部分数据 String.format(\\"%s %s\\",msg1,msg2); 比使用+或 concat()方法节省内存 toUpperCase() //转成大写字母 charAt(int index) //指定索引处的字符。索引范围为从 0 到 length() - 1。 indexOf(int ch) //返回指定字符在此字符串中第一次出现处的索引。 toCharArray() //字符串 转为 char [] //如果该对象代表的字符串在常量池可以找到，那么，返回该常量的引用，如果找不到，那么，去堆中查找，堆中存在，则讲堆中对象的引用放入常量池(注意是对象的引用)，并返回该引用，如果都没有找到，则讲该字面量放入常量池 intern()","head":[["meta",{"property":"og:url","content":"https://zhaoxin1998.github.io/debugKing-github.io/debugKing-github.io/study/java/javaSE/06-String.html"}],["meta",{"property":"og:site_name","content":"DebugKing"}],["meta",{"property":"og:title","content":"字符串String"}],["meta",{"property":"og:description","content":"字符串String Stirng方法 String 是不可变的,String 类中使⽤ final 关键字修饰字符数组来保存字符串 使用 + 号拼接字符串,如果+号左右存在变量则调用的StringBuilder的 append() 方法拼接然后进行 toString() 相当于 new 一个字符串在堆. 若两边都是字面字符常量会在编译期就合并了. 常用方法 String.valueof(xxx) //将xxx转换为string类型 length() //字符串长度 trim() //去字符串前后空格 split(n) //按n（为字符或正则）进行字符串切割 replaceall(正则，新符号) //替换可字符可正则 replace(被替换字符，新字符) //替换只能用字符 substring(begin，end) //获取子字符串，含头不含尾从0开始数 s1.compareTo(s2) //字符串比较，实际上就是做减法从第一个不相同的字符开始比 equals(str）//字符串内容是否相同 equalsIgnorecase(str) //忽略大小写比较内容 isEmpty() //判断字符串是否为空 concat() //字符串连接 startsWith() //方法用于检测字符串是否以指定的前缀开始。 startsWith(String prefix, int toffset) //字符串中开始查找的位置,查找前缀 startsWith(String prefix) endsWith(String suffix) //测试此字符串是否以指定的后缀结尾 format() //字符串格式化,只用%s就可以接受大部分数据 String.format(\\"%s %s\\",msg1,msg2); 比使用+或 concat()方法节省内存 toUpperCase() //转成大写字母 charAt(int index) //指定索引处的字符。索引范围为从 0 到 length() - 1。 indexOf(int ch) //返回指定字符在此字符串中第一次出现处的索引。 toCharArray() //字符串 转为 char [] //如果该对象代表的字符串在常量池可以找到，那么，返回该常量的引用，如果找不到，那么，去堆中查找，堆中存在，则讲堆中对象的引用放入常量池(注意是对象的引用)，并返回该引用，如果都没有找到，则讲该字面量放入常量池 intern()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-08T10:44:09.000Z"}],["meta",{"property":"article:author","content":"DebugKing"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2024-01-08T10:44:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串String\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-08T10:44:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DebugKing\\",\\"url\\":\\"https://github.com/zhaoxin1998\\",\\"email\\":\\"1778524294@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Stirng方法","slug":"stirng方法","link":"#stirng方法","children":[{"level":3,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[]}]},{"level":2,"title":"StringBuffer StringBuilder方法","slug":"stringbuffer-stringbuilder方法","link":"#stringbuffer-stringbuilder方法","children":[{"level":3,"title":"常用方法","slug":"常用方法-1","link":"#常用方法-1","children":[]},{"level":3,"title":"String不可变的好处","slug":"string不可变的好处","link":"#string不可变的好处","children":[]},{"level":3,"title":"判断字符串是否为数字","slug":"判断字符串是否为数字","link":"#判断字符串是否为数字","children":[]}]}],"git":{"createdTime":1704710649000,"updatedTime":1704710649000,"contributors":[{"name":"赵新","email":"1778524294@qq.com","commits":1}]},"filePathRelative":"study/java/javaSE/06-String.md","localizedDate":"2024年1月8日","excerpt":"<h1> 字符串String</h1>\\n<h2> Stirng方法</h2>\\n<ul>\\n<li>String 是不可变的,String 类中使⽤ final 关键字修饰字符数组来保存字符串</li>\\n<li>使用 + 号拼接字符串,如果+号左右存在变量则调用的StringBuilder的 append() 方法拼接然后进行 toString() 相当于 new 一个字符串在堆. 若两边都是字面字符常量会在编译期就合并了.</li>\\n</ul>\\n<h3> 常用方法</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>            <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">valueof</span><span class=\\"token punctuation\\">(</span>xxx<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//将xxx转换为string类型</span>\\n            <span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//字符串长度</span>\\n            <span class=\\"token function\\">trim</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//去字符串前后空格</span>\\n            <span class=\\"token function\\">split</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//按n（为字符或正则）进行字符串切割</span>\\n            <span class=\\"token function\\">replaceall</span><span class=\\"token punctuation\\">(</span>正则，新符号<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//替换可字符可正则</span>\\n            <span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span>被替换字符，新字符<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//替换只能用字符</span>\\n            <span class=\\"token function\\">substring</span><span class=\\"token punctuation\\">(</span>begin，end<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//获取子字符串，含头不含尾从0开始数</span>\\n            s1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">compareTo</span><span class=\\"token punctuation\\">(</span>s2<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//字符串比较，实际上就是做减法从第一个不相同的字符开始比</span>\\n            <span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>str）<span class=\\"token comment\\">//字符串内容是否相同</span>\\n            <span class=\\"token function\\">equalsIgnorecase</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//忽略大小写比较内容</span>\\n            <span class=\\"token function\\">isEmpty</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//判断字符串是否为空</span>\\n            <span class=\\"token function\\">concat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//字符串连接</span>\\n            <span class=\\"token function\\">startsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//方法用于检测字符串是否以指定的前缀开始。</span>\\n            <span class=\\"token function\\">startsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> prefix<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> toffset<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//字符串中开始查找的位置,查找前缀</span>\\n            <span class=\\"token function\\">startsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> prefix<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token function\\">endsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> suffix<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//测试此字符串是否以指定的后缀结尾</span>\\n            <span class=\\"token function\\">format</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//字符串格式化,只用%s就可以接受大部分数据 String.format(\\"%s %s\\",msg1,msg2); 比使用+或</span>\\n            <span class=\\"token function\\">concat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>方法节省内存\\n            <span class=\\"token function\\">toUpperCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//转成大写字母</span>\\n            <span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//指定索引处的字符。索引范围为从 0 到 length() - 1。</span>\\n            <span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> ch<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//返回指定字符在此字符串中第一次出现处的索引。</span>\\n            <span class=\\"token function\\">toCharArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//字符串 转为 char []</span>\\n            <span class=\\"token comment\\">//如果该对象代表的字符串在常量池可以找到，那么，返回该常量的引用，如果找不到，那么，去堆中查找，堆中存在，则讲堆中对象的引用放入常量池(注意是对象的引用)，并返回该引用，如果都没有找到，则讲该字面量放入常量池</span>\\n            <span class=\\"token function\\">intern</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"copyright":{"author":"Mr.debugKing","license":"MIT"},"readingTime":{"minutes":3.54,"words":1062}}');export{n as data};
