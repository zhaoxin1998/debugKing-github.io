const n=JSON.parse(`{"key":"v-3e2c079e","path":"/study/java/javaSE/13-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"category":"基础","tag":["regex","java"],"description":"正则表达式 . 匹配除换行符以外的任意字符 [] 匹配所包含的任意一个字符。 [aeiou] 匹配aeiou任意一个 [0-9]、[a-z] 范围匹配 ^ 在 [ ] 中是取非操作 在 [ ] 中 . 不是元字符 + 匹配 1 个或者多个字符 * 匹配 0 个或者多个字符 ? 匹配 0 个或者 1 个字符 {n} 匹配 n 个字符 {m,n} 匹配 m~n 个字符 {m,} 至少匹配 m 个字符 # 分组 () 子表达式,子表达式的内容可以当成一个独立元素表示一个分组，即可以将它看成一个字符，并且使用 * 等元字符。 (\\\\w)(\\\\w) 自动命名分组，第一个小括号是分组1，第二个小括号是分组2 (?'Word'\\\\w+)) 表示定义了一个叫做Word的分组 (?&lt;Word&gt;\\\\w+)) 表示定义了一个叫做Word的分组 (?:\\\\w+) 匹配exp,不捕获匹配的文本，也不给此分组分配组号 # 后向引用 \\\\1 表示分组1匹配的文本 \\\\k&lt;Word&gt; 表示分组Word匹配的文本 \\\\ 转义字符, /需要进行转义才能匹配到 | 指明两项之间的一个选择。 \\\\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 \\\\G 上一个匹配的结尾（本次匹配开始） \\\\A 字符串开头(类似^，但不受处理多行选项的影响) \\\\Z 字符串结尾或行尾(不受处理多行选项的影响) \\\\z 字符串结尾(类似$，但不受处理多行选项的影响) \\\\f\\t换页符 \\\\n\\t换行符 \\\\r\\t回车符 \\\\t\\t制表符 \\\\v\\t垂直制表符 \\\\d\\t数字字符，等价于 [0-9] \\\\D\\t非数字字符，等价于 [^0-9] \\\\w\\t大小写字母，下划线和数字，等价于 [a-zA-Z0-9_] \\\\W\\t对 \\\\w 取非 \\\\s\\t任何一个空白字符，等价于 [\\\\f\\\\n\\\\r\\\\t\\\\v] \\\\S\\t对 \\\\s 取非 # 零宽断言（正向和负向）:匹配字符的时候再添加一些定位条件，使匹配更精准。 \\\\w+(?=ing) 匹配以ing结尾的多个字符（不包括ing） \\\\w+(?!ing) 匹配不是以ing结尾的多个字符 (?&lt;=re)\\\\w+ 匹配以re开头的多个字符（不包括re） (?&lt;!re)\\\\w+ 匹配不是以re开头的多个字符 (?&lt;=\\\\s)\\\\d+(?=\\\\s) 匹配两边是空白符的数字，不包括空白符 # 懒惰(匹配尽可能短的字符串)模式的启用只需在重复元字符之后加?既可。 # 正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权 *? 重复任意次，但尽可能少重复 +? 重复1次或更多次，但尽可能少重复 ?? 重复0次或1次，但尽可能少重复 {n,m}? 重复n到m次，但尽可能少重复 {n,}? 重复n次以上，但尽可能少重复 # 在表达式里插记号的方式来启用绝大多数的模式，在正则的哪里插入，就从哪里启用。 (?i)：忽略大小写(CASE_INSENSITIVE) (?x)：忽略空格字符(COMMENTS) (?s)：.匹配任意字符，包括换行符（DOTALL） (?m)：多行模式（MULTILINE） (?u)：对Unicode符大小写不敏感（UNICODE_CASE），必须启用CASE_INSENSITIVE (?d)：只有'\\\\n'才被认作一行的中止（UNIX_LINES） # 平衡组/递归匹配:用于匹配嵌套层次结构，常用于匹配HTML标签（当HTML内容不规范，起始标签和结束标签数量不同时，匹配出正确配对的标签） (?'group'\\\\w) 捕获的分组（\\\\w匹配到的内容）命名为group，并压入堆栈 (?'-group'\\\\w) 捕获分组（\\\\w匹配到的内容）后，弹出group分组栈的栈顶内容（最后压入的捕获内容），堆栈本来为空，则本分组的匹配失败 (?(group)yes|no) 如果group栈非空匹配表达式yes，否则匹配表达式no (?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败 # 注释 (?#comment)","head":[["meta",{"property":"og:url","content":"https://zhaoxin1998.github.io/debugKing-github.io/debugKing-github.io/study/java/javaSE/13-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"DebugKing"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正则表达式 . 匹配除换行符以外的任意字符 [] 匹配所包含的任意一个字符。 [aeiou] 匹配aeiou任意一个 [0-9]、[a-z] 范围匹配 ^ 在 [ ] 中是取非操作 在 [ ] 中 . 不是元字符 + 匹配 1 个或者多个字符 * 匹配 0 个或者多个字符 ? 匹配 0 个或者 1 个字符 {n} 匹配 n 个字符 {m,n} 匹配 m~n 个字符 {m,} 至少匹配 m 个字符 # 分组 () 子表达式,子表达式的内容可以当成一个独立元素表示一个分组，即可以将它看成一个字符，并且使用 * 等元字符。 (\\\\w)(\\\\w) 自动命名分组，第一个小括号是分组1，第二个小括号是分组2 (?'Word'\\\\w+)) 表示定义了一个叫做Word的分组 (?&lt;Word&gt;\\\\w+)) 表示定义了一个叫做Word的分组 (?:\\\\w+) 匹配exp,不捕获匹配的文本，也不给此分组分配组号 # 后向引用 \\\\1 表示分组1匹配的文本 \\\\k&lt;Word&gt; 表示分组Word匹配的文本 \\\\ 转义字符, /需要进行转义才能匹配到 | 指明两项之间的一个选择。 \\\\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 \\\\G 上一个匹配的结尾（本次匹配开始） \\\\A 字符串开头(类似^，但不受处理多行选项的影响) \\\\Z 字符串结尾或行尾(不受处理多行选项的影响) \\\\z 字符串结尾(类似$，但不受处理多行选项的影响) \\\\f\\t换页符 \\\\n\\t换行符 \\\\r\\t回车符 \\\\t\\t制表符 \\\\v\\t垂直制表符 \\\\d\\t数字字符，等价于 [0-9] \\\\D\\t非数字字符，等价于 [^0-9] \\\\w\\t大小写字母，下划线和数字，等价于 [a-zA-Z0-9_] \\\\W\\t对 \\\\w 取非 \\\\s\\t任何一个空白字符，等价于 [\\\\f\\\\n\\\\r\\\\t\\\\v] \\\\S\\t对 \\\\s 取非 # 零宽断言（正向和负向）:匹配字符的时候再添加一些定位条件，使匹配更精准。 \\\\w+(?=ing) 匹配以ing结尾的多个字符（不包括ing） \\\\w+(?!ing) 匹配不是以ing结尾的多个字符 (?&lt;=re)\\\\w+ 匹配以re开头的多个字符（不包括re） (?&lt;!re)\\\\w+ 匹配不是以re开头的多个字符 (?&lt;=\\\\s)\\\\d+(?=\\\\s) 匹配两边是空白符的数字，不包括空白符 # 懒惰(匹配尽可能短的字符串)模式的启用只需在重复元字符之后加?既可。 # 正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权 *? 重复任意次，但尽可能少重复 +? 重复1次或更多次，但尽可能少重复 ?? 重复0次或1次，但尽可能少重复 {n,m}? 重复n到m次，但尽可能少重复 {n,}? 重复n次以上，但尽可能少重复 # 在表达式里插记号的方式来启用绝大多数的模式，在正则的哪里插入，就从哪里启用。 (?i)：忽略大小写(CASE_INSENSITIVE) (?x)：忽略空格字符(COMMENTS) (?s)：.匹配任意字符，包括换行符（DOTALL） (?m)：多行模式（MULTILINE） (?u)：对Unicode符大小写不敏感（UNICODE_CASE），必须启用CASE_INSENSITIVE (?d)：只有'\\\\n'才被认作一行的中止（UNIX_LINES） # 平衡组/递归匹配:用于匹配嵌套层次结构，常用于匹配HTML标签（当HTML内容不规范，起始标签和结束标签数量不同时，匹配出正确配对的标签） (?'group'\\\\w) 捕获的分组（\\\\w匹配到的内容）命名为group，并压入堆栈 (?'-group'\\\\w) 捕获分组（\\\\w匹配到的内容）后，弹出group分组栈的栈顶内容（最后压入的捕获内容），堆栈本来为空，则本分组的匹配失败 (?(group)yes|no) 如果group栈非空匹配表达式yes，否则匹配表达式no (?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败 # 注释 (?#comment)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-18T03:56:49.000Z"}],["meta",{"property":"article:author","content":"DebugKing"}],["meta",{"property":"article:tag","content":"regex"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2023-07-18T03:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-18T03:56:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DebugKing\\",\\"url\\":\\"https://github.com/zhaoxin1998\\",\\"email\\":\\"1778524294@qq.com\\"}]}"]]},"headers":[],"git":{"createdTime":1689652609000,"updatedTime":1689652609000,"contributors":[{"name":"zhaoxin1998","email":"1778524294@qq.com","commits":1}]},"filePathRelative":"study/java/javaSE/13-正则表达式.md","localizedDate":"2023年7月18日","excerpt":"<h1> 正则表达式</h1>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>.  匹配除换行符以外的任意字符\\n[] 匹配所包含的任意一个字符。\\n    [aeiou] 匹配aeiou任意一个\\n    [0-9]、[a-z]  范围匹配\\n    ^ 在 [ ] 中是取非操作\\n    在 [ ] 中 . 不是元字符\\n\\n+ 匹配 1 个或者多个字符\\n* 匹配 0 个或者多个字符\\n? 匹配 0 个或者 1 个字符\\n\\n{n} 匹配 n 个字符\\n{m,n} 匹配 m~n 个字符\\n{m,} 至少匹配 m 个字符\\n\\n# 分组\\n() 子表达式,子表达式的内容可以当成一个独立元素表示一个分组，即可以将它看成一个字符，并且使用 * 等元字符。\\n(\\\\w)(\\\\w) 自动命名分组，第一个小括号是分组1，第二个小括号是分组2\\n(?'Word'\\\\w+)) 表示定义了一个叫做Word的分组\\n(?&lt;Word&gt;\\\\w+)) 表示定义了一个叫做Word的分组\\n(?:\\\\w+) 匹配exp,不捕获匹配的文本，也不给此分组分配组号\\n# 后向引用\\n\\\\1 表示分组1匹配的文本\\n\\\\k&lt;Word&gt; 表示分组Word匹配的文本\\n\\n\\n\\\\ 转义字符, /需要进行转义才能匹配到\\n| 指明两项之间的一个选择。\\n\\n\\\\b 匹配单词的开始或结束\\n^ 匹配字符串的开始\\n$ 匹配字符串的结束\\n\\\\G 上一个匹配的结尾（本次匹配开始）\\n\\\\A 字符串开头(类似^，但不受处理多行选项的影响)\\n\\\\Z 字符串结尾或行尾(不受处理多行选项的影响)\\n\\\\z 字符串结尾(类似$，但不受处理多行选项的影响)\\n\\n\\\\f\\t换页符\\n\\\\n\\t换行符\\n\\\\r\\t回车符\\n\\\\t\\t制表符\\n\\\\v\\t垂直制表符\\n\\n\\\\d\\t数字字符，等价于 [0-9]\\n\\\\D\\t非数字字符，等价于 [^0-9]\\n\\n\\\\w\\t大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]\\n\\\\W\\t对 \\\\w 取非\\n\\n\\\\s\\t任何一个空白字符，等价于 [\\\\f\\\\n\\\\r\\\\t\\\\v]\\n\\\\S\\t对 \\\\s 取非\\n\\n# 零宽断言（正向和负向）:匹配字符的时候再添加一些定位条件，使匹配更精准。\\n\\\\w+(?=ing) 匹配以ing结尾的多个字符（不包括ing）\\n\\\\w+(?!ing) 匹配不是以ing结尾的多个字符\\n(?&lt;=re)\\\\w+ 匹配以re开头的多个字符（不包括re）\\n(?&lt;!re)\\\\w+ 匹配不是以re开头的多个字符\\n(?&lt;=\\\\s)\\\\d+(?=\\\\s) 匹配两边是空白符的数字，不包括空白符\\n\\n# 懒惰(匹配尽可能短的字符串)模式的启用只需在重复元字符之后加?既可。\\n    # 正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权\\n*? 重复任意次，但尽可能少重复\\n+? 重复1次或更多次，但尽可能少重复\\n?? 重复0次或1次，但尽可能少重复\\n{n,m}? 重复n到m次，但尽可能少重复\\n{n,}? 重复n次以上，但尽可能少重复\\n\\n# 在表达式里插记号的方式来启用绝大多数的模式，在正则的哪里插入，就从哪里启用。\\n(?i)：忽略大小写(CASE_INSENSITIVE)\\n(?x)：忽略空格字符(COMMENTS)\\n(?s)：.匹配任意字符，包括换行符（DOTALL）\\n(?m)：多行模式（MULTILINE）\\n(?u)：对Unicode符大小写不敏感（UNICODE_CASE），必须启用CASE_INSENSITIVE\\n(?d)：只有'\\\\n'才被认作一行的中止（UNIX_LINES）\\n\\n# 平衡组/递归匹配:用于匹配嵌套层次结构，常用于匹配HTML标签（当HTML内容不规范，起始标签和结束标签数量不同时，匹配出正确配对的标签）\\n(?'group'\\\\w) 捕获的分组（\\\\w匹配到的内容）命名为group，并压入堆栈\\n(?'-group'\\\\w) 捕获分组（\\\\w匹配到的内容）后，弹出group分组栈的栈顶内容（最后压入的捕获内容），堆栈本来为空，则本分组的匹配失败\\n(?(group)yes|no) 如果group栈非空匹配表达式yes，否则匹配表达式no\\n(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败\\n\\n# 注释\\n(?#comment)\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"copyright":{"author":"Mr.debugKing","license":"MIT"},"readingTime":{"minutes":4.37,"words":1312}}`);export{n as data};
