import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-88d002b0.js";const e={},p=t(`<h1 id="java中的多线程和juc" tabindex="-1"><a class="header-anchor" href="#java中的多线程和juc" aria-hidden="true">#</a> Java中的多线程和JUC</h1><h2 id="线程创建" tabindex="-1"><a class="header-anchor" href="#线程创建" aria-hidden="true">#</a> 线程创建</h2><ul><li>java无法真正开启线程,只能通过private native void start0(); 调用本地方法.让本地c++方法开启线程,因为java运行在虚拟机上无法直接操作硬件.</li></ul><h4 id="继承thread类" tabindex="-1"><a class="header-anchor" href="#继承thread类" aria-hidden="true">#</a> 继承Thread类</h4><ul><li>继承Thread类，重写run方法，创建对象,调用start方法开启线程执行run方法.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>

                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">//run方法线程体</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--{&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;}--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">//main线程，主线程</span>

                            <span class="token comment">//创建一个线程对象</span>
                            <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment">//调用start方法开启线程</span>
                            test<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;【&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                            输出：
                            【<span class="token number">0</span>】
                            【<span class="token number">1</span>】
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            <span class="token operator">--</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token operator">--</span>
                            【<span class="token number">2</span>】
                            【<span class="token number">3</span>】
                            【<span class="token number">4</span>】
                            【<span class="token number">5</span>】
                            【<span class="token number">6</span>】
                            【<span class="token number">7</span>】
                            【<span class="token number">8</span>】
                            【<span class="token number">9</span>】
		<span class="token comment">//！！！start()方法开启的子线程不一定立即执行,由CPU决定调度那个线程！！！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现runnable接口" tabindex="-1"><a class="header-anchor" href="#实现runnable接口" aria-hidden="true">#</a> 实现Runnable接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TalkSend</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
                		<span class="token comment">//xxx</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                		<span class="token comment">// xxx</span>
                	<span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TalkReceive</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
                			<span class="token comment">//xxx</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                			<span class="token comment">// xxx</span>
               		<span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
				
				<span class="token comment">//开启两个线程</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TalkSend</span><span class="token punctuation">(</span><span class="token number">5555</span><span class="token punctuation">,</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">;</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TalkReceive</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span><span class="token string">&quot;学生&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">;</span>
                		<span class="token comment">//内部类</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               		 <span class="token annotation punctuation">@Override</span>
                	 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                		<span class="token keyword">try</span> <span class="token punctuation">{</span>
                				<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                		  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                				e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                		<span class="token punctuation">}</span>
                	<span class="token punctuation">}</span>
                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					


				<span class="token comment">//真实开发中,类不用实现接口,直接new线程将对象传入线程要通过线程池获取</span>
                <span class="token comment">//资源类不需要实现Runnable接口,重写run方法. 完成解耦</span>
                <span class="token keyword">class</span> <span class="token class-name">Ticket</span><span class="token punctuation">{</span>
                <span class="token comment">//正常编写属性和方法</span>
                <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//.....</span>
                	<span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Ticket</span> tk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//使用lambda表达式,启动线程</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span>tk<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;线程A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span>tk<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;线程B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span>tk<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;线程C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现callable接口" tabindex="-1"><a class="header-anchor" href="#实现callable接口" aria-hidden="true">#</a> 实现Callable接口</h4><p>有返回值(和指定的泛型相同),可以抛出异常</p><ol><li>实现callable接口(要指定泛型),</li><li>重写call方法.</li><li>因为Thread不能直接 接收Callable接口,所有要通过FutureTask适配类 FutureTask即可接收Callable接口,也可接收Runnable接口</li><li>FutureTask的 get 方法获取Callable接口call方法的返回值. 可能会因为call方法没执行完而阻塞</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span>  <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;call()方法执行中...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestThread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>testThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适配类</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果会被缓存，效率高</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取callable的返回结果</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
输出：
<span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法执行中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1</span>
<span class="token comment">//注意: 开启了两个线程但因为结果会被缓存,所以call()方法只执行了一次.</span>
<span class="token class-name">Executors</span><span class="token punctuation">.</span>callable（<span class="token class-name">Runnable</span> task ）可以实现 <span class="token class-name">Runnable</span> 对象和 <span class="token class-name">Callable</span> 对象之间的
相互转换。   
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="thread方法" tabindex="-1"><a class="header-anchor" href="#thread方法" aria-hidden="true">#</a> Thread方法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>            //构造器
            new Thread(Runnable接口实现类对象);
            new Thread(Runnable接口实现类对象,线程名);
            //非静态方法
            start(); //创建线程
            setPriority(int) //更改线程优先级
            getPriority() //获取线程优先级
            a.join() //等待a线程运行结束后,再继续执行当前线程
            isAlive() //检测线程是否处于活跃状态
            interrupt() //中断线程,不推荐使用
            //线程中断并不会使线程立即退出，而是给线程发送一个通知，告知线程需要退出了。至
            于目标线程接到通知后如何处理是由它自己决定
            getName() //获取线程名
            //静态方法
            Thread.currentThread() //获取当前的线程
            Thread.sleep(200) //线程休眠200毫秒,不会释放锁
            Thread.yield() //线程让出CPU,再共同竞争
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="线程状态-thread-state" tabindex="-1"><a class="header-anchor" href="#线程状态-thread-state" aria-hidden="true">#</a> 线程状态(Thread.State)</h4><ul><li>jvm将操作系统中的running运行中和ready就绪隐藏起来,并且统一暴露为runnable可运行的.因为jvm无法进行cpu的调度.</li><li>阻塞和等待的区别在于，阻塞是被动的，而等待是主动的，不会被分配 CPU 执行时间, 需要显式被唤</li></ul><h4 id="线程优先级priority" tabindex="-1"><a class="header-anchor" href="#线程优先级priority" aria-hidden="true">#</a> 线程优先级priority</h4><p>优先级用数字表示1-10,数字越大优先级越高,main方法默认为5 注意: 先设置优先级再启动</p><h4 id="守护线程daemon" tabindex="-1"><a class="header-anchor" href="#守护线程daemon" aria-hidden="true">#</a> 守护线程daemon</h4><p>虚拟机不需要等待守护线程执行完毕</p><p>虚拟机必须等待用户线程执行完毕</p><p>Thread thread=new Thread(god);</p><p>thread.setDaemon(true); //默认是false表示是用户线程，正常的线程都是用户线程.</p><h4 id="停止线程" tabindex="-1"><a class="header-anchor" href="#停止线程" aria-hidden="true">#</a> 停止线程</h4><ul><li>不推荐使用jdk提供的停止线程方法: stop destroy</li><li>推荐让线程自己停下来</li><li>使用一个标志位来停止线程,并对外提供一个修改标识的方法</li></ul><h2 id="threadlocal-数据隔离" tabindex="-1"><a class="header-anchor" href="#threadlocal-数据隔离" aria-hidden="true">#</a> ThreadLocal 数据隔离</h2><ul><li>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。而使用 ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改。</li><li>每个线程都可以通过set()和get()来对这个局部变量进行操作，但不会和其他线程的局 部变量进行冲突，实现了线程的数据隔离。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>            <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mStringThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mStringThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;droidyue.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mStringThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mStringThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ThreadLocal必须在使用完成后手动回收</span>
            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> formatter <span class="token operator">=</span> <span class="token keyword">new</span>
            <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            		<span class="token annotation punctuation">@Override</span>
            		<span class="token comment">// 设置默认get()方法初始化值</span>
            		<span class="token keyword">protected</span> <span class="token class-name">SimpleDateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           				 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyyMMdd HHmm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            			<span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="threadlocal-适用于如下两种场景" tabindex="-1"><a class="header-anchor" href="#threadlocal-适用于如下两种场景" aria-hidden="true">#</a> ThreadLocal 适用于如下两种场景</h4><ul><li>每个线程需要有自己单独的实例</li><li>实例需要在多个方法中共享，但不希望被多线程共享</li></ul><h4 id="threadlocal-原理" tabindex="-1"><a class="header-anchor" href="#threadlocal-原理" aria-hidden="true">#</a> ThreadLocal 原理</h4><ul><li>ThreadLocal 内部维护的是㇐个类似 Map 的 ThreadLocalMap 数据结构， key 为当前对象的ThreadLocal 对象，值为 set的值.</li><li>每个线程都有自己ThreadLocalMap 对象,线程将ThreadLocal作为key从 ThreadLocalMap获取属于自己的value。</li></ul><h3 id="threadlocal-内存泄露问题" tabindex="-1"><a class="header-anchor" href="#threadlocal-内存泄露问题" aria-hidden="true">#</a> ThreadLocal 内存泄露问题</h3><p>ThreadLocalMap 中使⽤的 key 为 ThreadLocal 的弱引⽤,⽽ value 是强引⽤。 如果一个对象只存在弱引用，那么在下一次垃圾回收的时候必然会被清理掉。所以如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候会被清理掉的，这样一 来 ThreadLocalMap中使用这个 ThreadLocal 的 key 也会被清理掉。但是，value 是强引用，不会被清理，这样一来就会出现 key 为 null 的 value。假如我们不做任何措施的 话，value 永远⽆法被GC 回收，这个时候就可能会产⽣内存泄露。当调用 set(),get(),remove()时都会清空key为null的记录</p><h3 id="线程复用问题" tabindex="-1"><a class="header-anchor" href="#线程复用问题" aria-hidden="true">#</a> 线程复用问题</h3><p>使用线程池或直接复用线程时,由于线程会进行复用导致第二次使用ThreadLocal时 还遗留了第一个线程设置的值.</p><p>处理办法：</p><ul><li>ThreadLocal使用完后使用remove()进行回收</li><li>线程执行前将ThreadLocal set为null</li><li>重写ThreadPoolExecutor的afterExecute(或beforeExecute)以清除 ThreadLocal</li></ul><h2 id="线程同步" tabindex="-1"><a class="header-anchor" href="#线程同步" aria-hidden="true">#</a> 线程同步</h2><h5 id="synchronized-同步锁-可重入锁-悲观锁" tabindex="-1"><a class="header-anchor" href="#synchronized-同步锁-可重入锁-悲观锁" aria-hidden="true">#</a> synchronized 同步锁,可重入锁，悲观锁</h5><h4 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h4><ul><li><h5 id="修饰代码块-jvm会在字节码文件中在同步代码块开始位置插入-monitorenter-进入监控-在同步代码块结束位置插入monitorexit-退出监控-指-令-当执行monitorenter-指令时-线程试图获取锁也就是获取-monitor-monitor-对象存在于每个java对象的对象头中-当计数器为0则可以成功获取-获取后将锁-计数器加1。相应的在执行monitorexit-指令后-将锁计数器减一-当计数器为0-时表明锁被释放。如果获取对象锁失败-那当前线程就要阻塞等待-直到锁被另-外㇐个线程释放为止。" tabindex="-1"><a class="header-anchor" href="#修饰代码块-jvm会在字节码文件中在同步代码块开始位置插入-monitorenter-进入监控-在同步代码块结束位置插入monitorexit-退出监控-指-令-当执行monitorenter-指令时-线程试图获取锁也就是获取-monitor-monitor-对象存在于每个java对象的对象头中-当计数器为0则可以成功获取-获取后将锁-计数器加1。相应的在执行monitorexit-指令后-将锁计数器减一-当计数器为0-时表明锁被释放。如果获取对象锁失败-那当前线程就要阻塞等待-直到锁被另-外㇐个线程释放为止。" aria-hidden="true">#</a> 修饰代码块：jvm会在字节码文件中在同步代码块开始位置插入 monitorenter(进入监控)在同步代码块结束位置插入monitorexit(退出监控)指 令.当执⾏monitorenter 指令时，线程试图获取锁也就是获取 monitor(monitor 对象存在于每个Java对象的对象头中)当计数器为0则可以成功获取，获取后将锁 计数器加1。相应的在执⾏monitorexit 指令后，将锁计数器减一，当计数器为0 时表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另 外㇐个线程释放为⽌。</h5></li><li><h5 id="修饰方法-jvm会在字节码文件中方法标识符中添加一个-acc-synchronized标识-执行线程需要先获得monitor锁-然后开始执行方法-方-法执行之后再释放monitor锁-当方法不管是正常return还是抛出异常都会释放-对应的monitor锁。" tabindex="-1"><a class="header-anchor" href="#修饰方法-jvm会在字节码文件中方法标识符中添加一个-acc-synchronized标识-执行线程需要先获得monitor锁-然后开始执行方法-方-法执行之后再释放monitor锁-当方法不管是正常return还是抛出异常都会释放-对应的monitor锁。" aria-hidden="true">#</a> 修饰方法： jvm会在字节码文件中方法标识符中添加一个 acc_synchronized标识.执行线程需要先获得monitor锁，然后开始执行方法，方 法执行之后再释放monitor锁，当方法不管是正常return还是抛出异常都会释放 对应的monitor锁。</h5></li></ul><h4 id="锁的范围" tabindex="-1"><a class="header-anchor" href="#锁的范围" aria-hidden="true">#</a> 锁的范围</h4><ul><li>非静态方法: 每个对象都有一个monitor锁(对象锁),记录在对象头的Mark Word中.</li><li>静态方法: 静态方法在类加载时就生成了,存在于.class字节码文件中,不管 new 多少个对象都只有一个锁 (类锁,只锁静态方法,与对象锁互不干扰).</li></ul><h4 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h4><ul><li>同步方法: 在方法的访问权限修饰符后,使用synchronized修饰</li><li>同步代码块: synchronized (obj) { } //obj为同步监视器,可以是任何对象,但推荐使用共享资源.同步方法中无需指定 同步监视器,因为同步方法的同步监视器就是this即对象本身.</li></ul><p>注意:当使用String作为监视器时,如果两个字符串相同且后一个不是new 出来 的,那么这两个字符串从同一个地址取值,可以看做同一个对象.锁也是共用的,可能导致死锁等问题.</p><h4 id="synchronized-优化" tabindex="-1"><a class="header-anchor" href="#synchronized-优化" aria-hidden="true">#</a> synchronized 优化</h4><ol><li>JVM在<strong>JDK 1.6</strong>中引入了<strong>分级锁</strong>机制来优化synchronized(1.6之前一直是重量级锁,挂起或唤醒线程需要操作系统从用户态转为内核态即为耗时)</li><li>当一个线程获取锁时，首先对象锁成为一个<strong>偏向锁</strong>,如果在接下来的执行 中，该锁没有被其他线程获取，那么持有偏向锁的线程就不需要进行同步 操作！(这是为了避免在同一线程重复获取同一把锁时，用户态和内核态频繁切换)</li><li>如果有多个线程竞争锁资源，锁将会升级为轻量级锁(CAS):</li></ol><ul><li>这适用于在短时间内持有锁，且分锁交替切换的场景</li><li>轻量级锁还结合了自旋锁来避免线程用户态与内核态的频繁切换</li></ul><ol start="4"><li>如果锁竞争太激烈（自旋锁失败），同步锁会升级为重量级锁</li><li>优化synchronized同步锁的关键：减少锁竞争: <ul><li>应该尽量使synchronized同步锁处于轻量级锁或偏向锁， 这样才能提高synchronized同步锁的性能</li><li>常用手段: <ul><li>减少锁粒度：降低锁竞争</li><li>减少锁的持有时间，提高synchronized同 步锁在自旋时获取锁资源的成功率，避免升级为 重量级锁</li><li>锁消除: 虚拟机即使编译器在运行时，如 果检测到那些共享数据不可能存在竞争，那 么就执行锁消除。锁消除可以节省毫无意义 的请求锁的时间。</li><li>锁粗化: 原则上，我们在编写代码的时 候，总是推荐将同步块的作用范围限制得尽 量小,但是如果一系列的连续操作都对同一个 对象反复加锁和解锁，那么会带来很多不必 要的性能消耗.</li></ul></li></ul></li><li>在锁竞争激烈时，可以考虑禁用偏向锁和禁用自旋锁</li></ol><h3 id="lock" tabindex="-1"><a class="header-anchor" href="#lock" aria-hidden="true">#</a> LOCK</h3><p>lock接口的实现类</p>`,53),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","08-多线程.html.vue"]]);export{d as default};
