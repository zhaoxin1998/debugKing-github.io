const n=JSON.parse('{"key":"v-9c7bf3ce","path":"/study/java/javaSE/08-%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"Java中的多线程和JUC","lang":"zh-CN","frontmatter":{"category":"基础","tag":["多线程","java"],"description":"Java中的多线程和JUC 线程创建 java无法真正开启线程,只能通过private native void start0(); 调用本地方法.让本地c++方法开启线程,因为java运行在虚拟机上无法直接操作硬件. 继承Thread类 继承Thread类，重写run方法，创建对象,调用start方法开启线程执行run方法. public class Test extends Thread{ @Override public void run() { //run方法线程体 for (int i = 0; i &lt; 10; i++) { System.out.println(\\"--{\\"+i+\\"}--\\"); } } public static void main(String[] args) { //main线程，主线程 //创建一个线程对象 Test test = new Test(); //调用start方法开启线程 test.start(); for (int i = 0; i &lt; 10; i++) { System.out.println(\\"【\\"+i+\\"】\\"); } } } 输出： 【0】 【1】 --{0}-- --{1}-- --{2}-- --{3}-- --{4}-- --{5}-- --{6}-- --{7}-- --{8}-- --{9}-- 【2】 【3】 【4】 【5】 【6】 【7】 【8】 【9】 \\t\\t//！！！start()方法开启的子线程不一定立即执行,由CPU决定调度那个线程！！！","head":[["meta",{"property":"og:url","content":"https://zhaoxin1998.github.io/debugKing-github.io/debugKing-github.io/study/java/javaSE/08-%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"DebugKing"}],["meta",{"property":"og:title","content":"Java中的多线程和JUC"}],["meta",{"property":"og:description","content":"Java中的多线程和JUC 线程创建 java无法真正开启线程,只能通过private native void start0(); 调用本地方法.让本地c++方法开启线程,因为java运行在虚拟机上无法直接操作硬件. 继承Thread类 继承Thread类，重写run方法，创建对象,调用start方法开启线程执行run方法. public class Test extends Thread{ @Override public void run() { //run方法线程体 for (int i = 0; i &lt; 10; i++) { System.out.println(\\"--{\\"+i+\\"}--\\"); } } public static void main(String[] args) { //main线程，主线程 //创建一个线程对象 Test test = new Test(); //调用start方法开启线程 test.start(); for (int i = 0; i &lt; 10; i++) { System.out.println(\\"【\\"+i+\\"】\\"); } } } 输出： 【0】 【1】 --{0}-- --{1}-- --{2}-- --{3}-- --{4}-- --{5}-- --{6}-- --{7}-- --{8}-- --{9}-- 【2】 【3】 【4】 【5】 【6】 【7】 【8】 【9】 \\t\\t//！！！start()方法开启的子线程不一定立即执行,由CPU决定调度那个线程！！！"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-08T10:44:09.000Z"}],["meta",{"property":"article:author","content":"DebugKing"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2024-01-08T10:44:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的多线程和JUC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-08T10:44:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DebugKing\\",\\"url\\":\\"https://github.com/zhaoxin1998\\",\\"email\\":\\"1778524294@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"线程创建","slug":"线程创建","link":"#线程创建","children":[]},{"level":2,"title":"ThreadLocal 数据隔离","slug":"threadlocal-数据隔离","link":"#threadlocal-数据隔离","children":[{"level":3,"title":"ThreadLocal 内存泄露问题","slug":"threadlocal-内存泄露问题","link":"#threadlocal-内存泄露问题","children":[]},{"level":3,"title":"线程复用问题","slug":"线程复用问题","link":"#线程复用问题","children":[]}]},{"level":2,"title":"线程同步","slug":"线程同步","link":"#线程同步","children":[{"level":3,"title":"LOCK","slug":"lock","link":"#lock","children":[]}]}],"git":{"createdTime":1704710649000,"updatedTime":1704710649000,"contributors":[{"name":"赵新","email":"1778524294@qq.com","commits":1}]},"filePathRelative":"study/java/javaSE/08-多线程.md","localizedDate":"2024年1月8日","excerpt":"<h1> Java中的多线程和JUC</h1>\\n<h2> 线程创建</h2>\\n<ul>\\n<li>java无法真正开启线程,只能通过private native void start0(); 调用本地方法.让本地c++方法开启线程,因为java运行在虚拟机上无法直接操作硬件.</li>\\n</ul>\\n<h4> 继承Thread类</h4>\\n<ul>\\n<li>继承Thread类，重写run方法，创建对象,调用start方法开启线程执行run方法.</li>\\n</ul>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>                    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Test</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">{</span>\\n\\n                        <span class=\\"token annotation punctuation\\">@Override</span>\\n                        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token comment\\">//run方法线程体</span>\\n                            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"--{\\"</span><span class=\\"token operator\\">+</span>i<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"}--\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                            <span class=\\"token punctuation\\">}</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n\\n                        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token comment\\">//main线程，主线程</span>\\n\\n                            <span class=\\"token comment\\">//创建一个线程对象</span>\\n                            <span class=\\"token class-name\\">Test</span> test <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                            <span class=\\"token comment\\">//调用start方法开启线程</span>\\n                            test<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                                <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"【\\"</span><span class=\\"token operator\\">+</span>i<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"】\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                            <span class=\\"token punctuation\\">}</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n\\n                            输出：\\n                            【<span class=\\"token number\\">0</span>】\\n                            【<span class=\\"token number\\">1</span>】\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            <span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">--</span>\\n                            【<span class=\\"token number\\">2</span>】\\n                            【<span class=\\"token number\\">3</span>】\\n                            【<span class=\\"token number\\">4</span>】\\n                            【<span class=\\"token number\\">5</span>】\\n                            【<span class=\\"token number\\">6</span>】\\n                            【<span class=\\"token number\\">7</span>】\\n                            【<span class=\\"token number\\">8</span>】\\n                            【<span class=\\"token number\\">9</span>】\\n\\t\\t<span class=\\"token comment\\">//！！！start()方法开启的子线程不一定立即执行,由CPU决定调度那个线程！！！</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"copyright":{"author":"Mr.debugKing","license":"MIT"},"readingTime":{"minutes":9.08,"words":2725}}');export{n as data};
